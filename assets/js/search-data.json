{
  
    
        "post0": {
            "title": "2021년 여름방학 특강 크롤링 데이터 저장하기",
            "content": "&#53356;&#47204;&#47553; &#44592;&#48376; &#53076;&#46300; . import requests from bs4 import BeautifulSoup url = &#39;수정필요&#39; response = requests.get(url) response.encoding = &#39;utf-8&#39; html = response.text soup = BeautifulSoup(html, &#39;html.parser&#39;) datagroup = soup.select(&#39;수정필요&#39;) # 클래스 &#39;.&#39; , 아이디 &#39;#&#39; for no, data in enumerate(datagroup, 1): print(no, data.text) . import requests from bs4 import BeautifulSoup url = &#39;https://ridibooks.com/category/bestsellers/2200&#39; response = requests.get(url) response.encoding = &#39;utf-8&#39; html = response.text soup = BeautifulSoup(html, &#39;html.parser&#39;) datagroup = soup.select(&#39;.title_text&#39;) # 클래스 &#39;.&#39; , 아이디 &#39;#&#39; for no, data in enumerate(datagroup, 1): print(no, data.text.strip()) . 1 한 권으로 읽는 컴퓨터 구조와 프로그래밍 2 개발자에서 아키텍트로 3 시드 마이어 4 컨테이너 인프라 환경 구축을 위한 쿠버네티스/도커 5 오브젝트 6 풀스택 서버리스 7 업무에 바로 쓰는 SQL 튜닝 8 웹소설 써서 먹고삽니다 9 메타버스, 이미 시작된 미래 10 파이썬으로 살펴보는 아키텍처 패턴 11 그림으로 이해하는 AWS 구조와 기술 12 개정판 | 리팩터링 (2판) 13 데이터 스토리 14 러닝 리액트(2판) 15 일잘러의 비밀, 구글 스프레드시트 제대로 파헤치기 16 눈치껏 못 배웁니다, 일센스 17 스프링 부트와 AWS로 혼자 구현하는 웹 서비스 18 로블록스 게임 제작 무작정 따라하기 19 Do it! 점프 투 파이썬 -전면 개정판 20 UX/UI의 10가지 심리학 법칙 . &#51060;&#48120;&#51648; &#53356;&#47204;&#47553; &#45936;&#51060;&#53552; &#51200;&#51109;&#54616;&#44592; . import shutil # 고수준의 파일연산 라이브러리 import requests # request를 보낼 수 있는 라이브러리 url = &#39;https://img.ridicdn.net/cover/194000109/xxlarge#1&#39; r = requests.get(url, stream=True) with open(&#39;sample.jpg&#39;, &#39;wb&#39;) as f: r.raw.decode_content = True shutil.copyfileobj(r.raw, f) . import requests from bs4 import BeautifulSoup r = requests.get(&#39;https://img.ridicdn.net/cover/194000109/xxlarge#1&#39;, stream=True) if r.status_code == 200: with open(&#39;test.jpg&#39;, &#39;wb&#39;) as f: for data in r.iter_content(1024): f.write(data) . &#53356;&#47204;&#47553; &#45936;&#51060;&#53552; &#54856;&#54168;&#51060;&#51648;&#47196; &#51200;&#51109;&#54616;&#44592; . import requests from bs4 import BeautifulSoup url = &#39;https://ridibooks.com/category/bestsellers/2200&#39; response = requests.get(url) response.encoding = &#39;utf-8&#39; html = response.text soup = BeautifulSoup(html, &#39;html.parser&#39;) datagroup = soup.select(&#39;.thumbnail&#39;) # 클래스 &#39;.&#39; , 아이디 &#39;#&#39; for data in datagroup: print(&#39;https:&#39; + data[&#39;data-src&#39;][:-7] + &#39;xxlarge#1&#39;) . https://img.ridicdn.net/cover/194000109/xxlarge#1 https://img.ridicdn.net/cover/3649000021/xxlarge#1 https://img.ridicdn.net/cover/443000917/xxlarge#1 https://img.ridicdn.net/cover/194000106/xxlarge#1 https://img.ridicdn.net/cover/754031863/xxlarge#1 https://img.ridicdn.net/cover/4489000001/xxlarge#1 https://img.ridicdn.net/cover/443000912/xxlarge#1 https://img.ridicdn.net/cover/754031846/xxlarge#1 https://img.ridicdn.net/cover/222002588/xxlarge#1 https://img.ridicdn.net/cover/2777000044/xxlarge#1 https://img.ridicdn.net/cover/1160000024/xxlarge#1 https://img.ridicdn.net/cover/1370000008/xxlarge#1 https://img.ridicdn.net/cover/1160000029/xxlarge#1 https://img.ridicdn.net/cover/443000859/xxlarge#1 https://img.ridicdn.net/cover/3903000015/xxlarge#1 https://img.ridicdn.net/cover/754026976/xxlarge#1 https://img.ridicdn.net/cover/194000105/xxlarge#1 https://img.ridicdn.net/cover/3780000117/xxlarge#1 https://img.ridicdn.net/cover/443000914/xxlarge#1 https://img.ridicdn.net/cover/443000907/xxlarge#1 . &#39;https:&#39; + datagroup[0][&#39;data-src&#39;] . &#39;https://img.ridicdn.net/cover/194000109/large#1&#39; . import requests from bs4 import BeautifulSoup import pandas as pd url = &#39;https://ridibooks.com/category/bestsellers/2200&#39; response = requests.get(url) response.encoding = &#39;utf-8&#39; html = response.text soup = BeautifulSoup(html, &#39;html.parser&#39;) 책순위 = [] 책제목 = [] 책이미지 = [] 책제목크롤링 = soup.select(&#39;.title_text&#39;) for no, data in enumerate(책제목크롤링, 1): 책순위.append(no) 책제목.append(data.text.strip()) 책이미지크롤링 = soup.select(&#39;.thumbnail&#39;) for data in 책이미지크롤링: 책이미지.append(&#39;https:&#39; + data[&#39;data-src&#39;][:-7] + &#39;xxlarge#1&#39;) 데이터 = { &#39;책순위&#39;:책순위, &#39;책제목&#39;:책제목, &#39;책이미지&#39;:책이미지 } . 데이터 = pd.DataFrame(데이터) 데이터 . 책순위 책제목 책이미지 . 0 1 | 시드 마이어 | https://img.ridicdn.net/cover/194000109/xxlarge#1 | . 1 2 | 한 권으로 읽는 컴퓨터 구조와 프로그래밍 | https://img.ridicdn.net/cover/3649000021/xxlar... | . 2 3 | 개발자에서 아키텍트로 | https://img.ridicdn.net/cover/443000917/xxlarge#1 | . 3 4 | Node.js 디자인 패턴 바이블 | https://img.ridicdn.net/cover/194000106/xxlarge#1 | . 4 5 | 컨테이너 인프라 환경 구축을 위한 쿠버네티스/도커 | https://img.ridicdn.net/cover/754031863/xxlarge#1 | . 5 6 | 비전공자를 위한 이해할 수 있는 IT 지식 | https://img.ridicdn.net/cover/4489000001/xxlar... | . 6 7 | 파이썬으로 살펴보는 아키텍처 패턴 | https://img.ridicdn.net/cover/443000912/xxlarge#1 | . 7 8 | Let&#39;s Get IT 자바스크립트 프로그래밍 | https://img.ridicdn.net/cover/754031846/xxlarge#1 | . 8 9 | 눈치껏 못 배웁니다, 일센스 | https://img.ridicdn.net/cover/222002588/xxlarge#1 | . 9 10 | 메타버스, 이미 시작된 미래 | https://img.ridicdn.net/cover/2777000044/xxlar... | . 10 11 | 모던 자바스크립트 Deep Dive | https://img.ridicdn.net/cover/1160000024/xxlar... | . 11 12 | 비전공자도 배워서 바로 쓰는 비즈니스 데이터 분석 입문 | https://img.ridicdn.net/cover/1370000008/xxlar... | . 12 13 | 개정판 | 시작하세요! 도커/쿠버네티스 | https://img.ridicdn.net/cover/1160000029/xxlar... | . 13 14 | 혼자 공부하는 머신러닝+딥러닝 | https://img.ridicdn.net/cover/443000859/xxlarge#1 | . 14 15 | 스프링 부트와 AWS로 혼자 구현하는 웹 서비스 | https://img.ridicdn.net/cover/3903000015/xxlar... | . 15 16 | 개정판 | 리액트를 다루는 기술 | https://img.ridicdn.net/cover/754026976/xxlarge#1 | . 16 17 | 다재다능 코틀린 프로그래밍 | https://img.ridicdn.net/cover/194000105/xxlarge#1 | . 17 18 | Vue.js 프로젝트 투입 일주일 전 | https://img.ridicdn.net/cover/3780000117/xxlar... | . 18 19 | NGINX 쿡북 | https://img.ridicdn.net/cover/443000914/xxlarge#1 | . 19 20 | 일잘러의 비밀, 구글 스프레드시트 제대로 파헤치기 | https://img.ridicdn.net/cover/443000907/xxlarge#1 | . def 이미지양식변환(path): return &#39;&lt;img src=&quot;&#39;+ path + &#39;&quot; width=&quot;100px&quot; &gt;&#39; 데이터.to_html(&#39;index.html&#39;, escape=False, formatters=dict(책이미지=이미지양식변환)) . s = &#39;&#39; for i, j, k in zip(책순위, 책제목, 책이미지): s += f&#39;&lt;tr&gt; &lt;td&gt;{i}&lt;/td&gt; &lt;td&gt;{j}&lt;/td&gt; &lt;td&gt;&lt;img src={k}&gt;&lt;/td&gt; &lt;/tr&gt;&#39; s = &#39;&lt;table&gt;&#39; + s + &#39;&lt;/table&gt;&#39; with open(&quot;노동.html&quot;, &quot;w&quot;) as f: f.write(s) . &#53356;&#47204;&#47553; &#51060;&#48120;&#51648; &#45936;&#51060;&#53552; &#54028;&#51068;&#47196; &#51200;&#51109;&#54616;&#44592; . import requests from bs4 import BeautifulSoup import shutil # 고수준의 파일연산 라이브러리 url = &#39;https://ridibooks.com/category/bestsellers/2200&#39; response = requests.get(url) response.encoding = &#39;utf-8&#39; html = response.text soup = BeautifulSoup(html, &#39;html.parser&#39;) datagroup = soup.select(&#39;.thumbnail&#39;) # 클래스 &#39;.&#39; , 아이디 &#39;#&#39; for data in datagroup: print(&#39;https:&#39; + data[&#39;data-src&#39;][:-7] + &#39;xxlarge#1&#39;) &#39;&#39;&#39; url = &#39;https://img.ridicdn.net/cover/194000109/xxlarge#1&#39; r = requests.get(url, stream=True) with open(&#39;sample.jpg&#39;, &#39;wb&#39;) as f: r.raw.decode_content = True shutil.copyfileobj(r.raw, f) &#39;&#39;&#39; . https://img.ridicdn.net/cover/3649000021/xxlarge#1 https://img.ridicdn.net/cover/443000917/xxlarge#1 https://img.ridicdn.net/cover/194000109/xxlarge#1 https://img.ridicdn.net/cover/754031863/xxlarge#1 https://img.ridicdn.net/cover/1160000027/xxlarge#1 https://img.ridicdn.net/cover/443000925/xxlarge#1 https://img.ridicdn.net/cover/443000922/xxlarge#1 https://img.ridicdn.net/cover/754031183/xxlarge#1 https://img.ridicdn.net/cover/2777000044/xxlarge#1 https://img.ridicdn.net/cover/443000912/xxlarge#1 https://img.ridicdn.net/cover/754031919/xxlarge#1 https://img.ridicdn.net/cover/443000786/xxlarge#1 https://img.ridicdn.net/cover/443000924/xxlarge#1 https://img.ridicdn.net/cover/443000923/xxlarge#1 https://img.ridicdn.net/cover/443000907/xxlarge#1 https://img.ridicdn.net/cover/222002588/xxlarge#1 https://img.ridicdn.net/cover/3903000015/xxlarge#1 https://img.ridicdn.net/cover/754031983/xxlarge#1 https://img.ridicdn.net/cover/754026225/xxlarge#1 https://img.ridicdn.net/cover/3649000017/xxlarge#1 . import requests from bs4 import BeautifulSoup import shutil # 고수준의 파일연산 라이브러리 url = &#39;https://ridibooks.com/category/bestsellers/2200&#39; response = requests.get(url) response.encoding = &#39;utf-8&#39; html = response.text soup = BeautifulSoup(html, &#39;html.parser&#39;) datagroup = soup.select(&#39;.thumbnail&#39;) # 클래스 &#39;.&#39; , 아이디 &#39;#&#39; filename = 0 for data in datagroup: url = &#39;https:&#39; + data[&#39;data-src&#39;][:-7] + &#39;xxlarge#1&#39; r = requests.get(url, stream=True) #성산일출봉 폴더에 다운로드 받아 저장합니다. with open(&#39;성산일출봉/&#39; + str(filename) + &#39;.jpg&#39;, &#39;wb&#39;) as f: r.raw.decode_content = True shutil.copyfileobj(r.raw, f) filename += 1 .",
            "url": "https://yebonkwak.github.io/modele_blog/crawling/2021/07/20/_07_19_%ED%81%AC%EB%A1%A4%EB%A7%81_%EB%8D%B0%EC%9D%B4%ED%84%B0_%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0(DataFrame,_img).html",
            "relUrl": "/crawling/2021/07/20/_07_19_%ED%81%AC%EB%A1%A4%EB%A7%81_%EB%8D%B0%EC%9D%B4%ED%84%B0_%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0(DataFrame,_img).html",
            "date": " • Jul 20, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "데이터 분석 Pandas 기초 문법 노트북",
            "content": "import pandas as pd data = pd.read_html(&#39;https://ko.wikipedia.org/wiki/%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD%EC%9D%98_%EC%9D%B8%EA%B5%AC&#39;) . 인구수 = data[1] 사망자수 = 인구수[[&#39;사망자수(명)&#39;]] 사망자수 . 사망자수(명) . 0 359042 | . 1 337948 | . 2 353818 | . 3 357701 | . 4 414366 | . ... ... | . 91 280827 | . 92 285534 | . 93 298820 | . 94 295132 | . 95 305100 | . 96 rows × 1 columns . 사망자수.sum()[0] . 28518711 . import requests from bs4 import BeautifulSoup paullab_url = &#39;https://ridibooks.com/category/bestsellers/2200&#39; response = requests.get(paullab_url) response.encoding = &#39;utf-8&#39; html = response.text soup = BeautifulSoup(html, &#39;html.parser&#39;) lecture_list = soup.select(&#39;.title_text &#39;) # lecture 클래스 탐색 print(dir(lecture_list)) for lecture in lecture_list: print(lecture.text) . [&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__reversed__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;] 시드 마이어 한 권으로 읽는 컴퓨터 구조와 프로그래밍 개발자에서 아키텍트로 컨테이너 인프라 환경 구축을 위한 쿠버네티스/도커 비전공자를 위한 이해할 수 있는 IT 지식 오브젝트 Node.js 디자인 패턴 바이블 눈치껏 못 배웁니다, 일센스 개정판 | 시작하세요! 도커/쿠버네티스 다재다능 코틀린 프로그래밍 파이썬으로 살펴보는 아키텍처 패턴 혼자 공부하는 머신러닝+딥러닝 비전공자도 배워서 바로 쓰는 비즈니스 데이터 분석 입문 Let&#39;s Get IT 자바스크립트 프로그래밍 개정판 | 리액트를 다루는 기술 메타버스, 이미 시작된 미래 IT 좀 아는 사람 이것이 취업을 위한 코딩 테스트다 with 파이썬 모던 자바스크립트 Deep Dive NGINX 쿡북 . import requests from bs4 import BeautifulSoup paullab_url = &#39;https://ridibooks.com/category/bestsellers/2200&#39; response = requests.get(paullab_url) response.encoding = &#39;utf-8&#39; html = response.text soup = BeautifulSoup(html, &#39;html.parser&#39;) 책순위 = [] 책이름 = [] 책이미지 = [] bookeservices = soup.select(&#39;.thumbnail &#39;) # 수정 for no, book in enumerate(bookeservices, 1): 책순위.append(no) 책이름.append(book[&#39;alt&#39;]) 책이미지.append(&#39;https:&#39; + book[&#39;data-src&#39;]) . import pandas as pd . df = pd.DataFrame({ &#39;책순위&#39; : 책순위, &#39;책이름&#39; : 책이름, &#39;책이미지&#39; : 책이미지 }) df . 책순위 책이름 책이미지 . 0 1 | 시드 마이어 | https://img.ridicdn.net/cover/194000109/large#1 | . 1 2 | 한 권으로 읽는 컴퓨터 구조와 프로그래밍 | https://img.ridicdn.net/cover/3649000021/large#1 | . 2 3 | 개발자에서 아키텍트로 | https://img.ridicdn.net/cover/443000917/large#1 | . 3 4 | 컨테이너 인프라 환경 구축을 위한 쿠버네티스/도커 | https://img.ridicdn.net/cover/754031863/large#1 | . 4 5 | 비전공자를 위한 이해할 수 있는 IT 지식 | https://img.ridicdn.net/cover/4489000001/large#1 | . 5 6 | 오브젝트 | https://img.ridicdn.net/cover/1160000027/large#1 | . 6 7 | Node.js 디자인 패턴 바이블 | https://img.ridicdn.net/cover/194000106/large#1 | . 7 8 | 눈치껏 못 배웁니다, 일센스 | https://img.ridicdn.net/cover/222002588/large#1 | . 8 9 | 개정판 | 시작하세요! 도커/쿠버네티스 | https://img.ridicdn.net/cover/1160000029/large#1 | . 9 10 | 다재다능 코틀린 프로그래밍 | https://img.ridicdn.net/cover/194000105/large#1 | . 10 11 | 파이썬으로 살펴보는 아키텍처 패턴 | https://img.ridicdn.net/cover/443000912/large#1 | . 11 12 | 혼자 공부하는 머신러닝+딥러닝 | https://img.ridicdn.net/cover/443000859/large#1 | . 12 13 | 비전공자도 배워서 바로 쓰는 비즈니스 데이터 분석 입문 | https://img.ridicdn.net/cover/1370000008/large#1 | . 13 14 | Let&#39;s Get IT 자바스크립트 프로그래밍 | https://img.ridicdn.net/cover/754031846/large#1 | . 14 15 | 개정판 | 리액트를 다루는 기술 | https://img.ridicdn.net/cover/754026976/large#1 | . 15 16 | 메타버스, 이미 시작된 미래 | https://img.ridicdn.net/cover/2777000044/large#1 | . 16 17 | IT 좀 아는 사람 | https://img.ridicdn.net/cover/1046000113/large#1 | . 17 18 | 이것이 취업을 위한 코딩 테스트다 with 파이썬 | https://img.ridicdn.net/cover/443000825/large#1 | . 18 19 | 모던 자바스크립트 Deep Dive | https://img.ridicdn.net/cover/1160000024/large#1 | . 19 20 | NGINX 쿡북 | https://img.ridicdn.net/cover/443000914/large#1 | . &#52280;&#44256;&#47928;&#54732; . * 판다스 공식 홈페이지 * 판다스 공식 홈페이지 활용2 . df.to_html(&#39;insdex.html&#39;) . def 이미지변환(path): return f&#39;&lt;img src=&quot;{path}&quot; width=&quot;60&quot; &gt;&#39; df.to_html(&#39;index.html&#39;,escape=False, formatters=dict(책이미지=이미지변환)) . import numpy as np import pandas as pd import matplotlib.pyplot as plt . How to create plots in pandas?( . ) . df= pd.read_csv(&#39;train.csv&#39;) df[[&#39;SibSp&#39;, &#39;Parch&#39;]].plot() . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7faa15c5bc90&gt; . df.columns . Index([&#39;PassengerId&#39;, &#39;Survived&#39;, &#39;Pclass&#39;, &#39;Name&#39;, &#39;Sex&#39;, &#39;Age&#39;, &#39;SibSp&#39;, &#39;Parch&#39;, &#39;Ticket&#39;, &#39;Fare&#39;, &#39;Cabin&#39;, &#39;Embarked&#39;], dtype=&#39;object&#39;) . df.plot.scatter(x=&#39;Age&#39;, y=&#39;Pclass&#39;, alpha=0.5) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7faa169ac250&gt; . df.plot.scatter(x=&#39;Age&#39;, y=&#39;Fare&#39;, alpha=0.5) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7faa167afc50&gt; . df[[&#39;Age&#39;]].plot.box() . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7faa16738810&gt; . How to create new columns derived from existing columns? . 링크 텍스트 . . df[&#39;Family&#39;] = 1 + df[&#39;SibSp&#39;] + df[&#39;Parch&#39;] df . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked Family . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | 2 | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | 2 | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | 1 | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | 2 | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | 1 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 886 887 | 0 | 2 | Montvila, Rev. Juozas | male | 27.0 | 0 | 0 | 211536 | 13.0000 | NaN | S | 1 | . 887 888 | 1 | 1 | Graham, Miss. Margaret Edith | female | 19.0 | 0 | 0 | 112053 | 30.0000 | B42 | S | 1 | . 888 889 | 0 | 3 | Johnston, Miss. Catherine Helen &quot;Carrie&quot; | female | NaN | 1 | 2 | W./C. 6607 | 23.4500 | NaN | S | 4 | . 889 890 | 1 | 1 | Behr, Mr. Karl Howell | male | 26.0 | 0 | 0 | 111369 | 30.0000 | C148 | C | 1 | . 890 891 | 0 | 3 | Dooley, Mr. Patrick | male | 32.0 | 0 | 0 | 370376 | 7.7500 | NaN | Q | 1 | . 891 rows × 13 columns . How to calculate summary statistics? . import pandas as pd . df = pd.read_csv(&#39;train.csv&#39;) df.head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . df[&quot;Age&quot;].mean() # 평균 . 29.69911764705882 . df[[&quot;Age&quot;, &quot;Fare&quot;]].median() # 중앙값 . Age 28.0000 Fare 14.4542 dtype: float64 . df[[&quot;Age&quot;, &quot;Fare&quot;]].describe() # 일반 통계치 . Age Fare . count 714.000000 | 891.000000 | . mean 29.699118 | 32.204208 | . std 14.526497 | 49.693429 | . min 0.420000 | 0.000000 | . 25% 20.125000 | 7.910400 | . 50% 28.000000 | 14.454200 | . 75% 38.000000 | 31.000000 | . max 80.000000 | 512.329200 | . Aggregating statistics grouped by category . Aggregating statistics . df[[&quot;Sex&quot;, &quot;Age&quot;]].groupby(&quot;Sex&quot;).mean() . Age . Sex . female 27.915709 | . male 30.726645 | . df.groupby(&quot;Sex&quot;).mean() . PassengerId Survived Pclass Age SibSp Parch Fare . Sex . female 431.028662 | 0.742038 | 2.159236 | 27.915709 | 0.694268 | 0.649682 | 44.479818 | . male 454.147314 | 0.188908 | 2.389948 | 30.726645 | 0.429809 | 0.235702 | 25.523893 | . df.groupby(&quot;Sex&quot;)[&quot;Age&quot;].mean() . Sex female 27.915709 male 30.726645 Name: Age, dtype: float64 . . df.groupby([&quot;Sex&quot;, &quot;Pclass&quot;])[&quot;Fare&quot;].mean() . Sex Pclass female 1 106.125798 2 21.970121 3 16.118810 male 1 67.226127 2 19.741782 3 12.661633 Name: Fare, dtype: float64 . Count number of records by category . df[&quot;Pclass&quot;].value_counts() . 3 491 1 216 2 184 Name: Pclass, dtype: int64 . df[&quot;Sex&quot;].value_counts() . male 577 female 314 Name: Sex, dtype: int64 . How to reshape the layout of tables? . Sort table rows . # sorted(리스트) - 리스트 안에 값을 변경하지 않고 return 값만 정렬 df.sort_values(by=&quot;Age&quot;).head() # 원본을 변경하지 않고 정렬 df.sort_values(by=[&#39;Pclass&#39;, &#39;Age&#39;], ascending=False).head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 851 852 | 0 | 3 | Svensson, Mr. Johan | male | 74.0 | 0 | 0 | 347060 | 7.7750 | NaN | S | . 116 117 | 0 | 3 | Connors, Mr. Patrick | male | 70.5 | 0 | 0 | 370369 | 7.7500 | NaN | Q | . 280 281 | 0 | 3 | Duane, Mr. Frank | male | 65.0 | 0 | 0 | 336439 | 7.7500 | NaN | Q | . 483 484 | 1 | 3 | Turkula, Mrs. (Hedwig) | female | 63.0 | 0 | 0 | 4134 | 9.5875 | NaN | S | . 326 327 | 0 | 3 | Nysveen, Mr. Johan Hansen | male | 61.0 | 0 | 0 | 345364 | 6.2375 | NaN | S | . Long to wide table format . 여성 = df[df[&quot;Sex&quot;] == &quot;female&quot;] 여성.head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 8 9 | 1 | 3 | Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) | female | 27.0 | 0 | 2 | 347742 | 11.1333 | NaN | S | . 9 10 | 1 | 2 | Nasser, Mrs. Nicholas (Adele Achem) | female | 14.0 | 1 | 0 | 237736 | 30.0708 | NaN | C | . 여성.sort_index().groupby([&quot;Age&quot;]).head(5) # 정렬하는 방법은 sort_values와 sort_index가 있습니다. 여성.sort_index().ascending=False).groupby([&quot;Age&quot;]).head(5) 여성[::-1] 여성{:]} . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 8 9 | 1 | 3 | Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) | female | 27.0 | 0 | 2 | 347742 | 11.1333 | NaN | S | . 9 10 | 1 | 2 | Nasser, Mrs. Nicholas (Adele Achem) | female | 14.0 | 1 | 0 | 237736 | 30.0708 | NaN | C | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 865 866 | 1 | 2 | Bystrom, Mrs. (Karolina) | female | 42.0 | 0 | 0 | 236852 | 13.0000 | NaN | S | . 871 872 | 1 | 1 | Beckwith, Mrs. Richard Leonard (Sallie Monypeny) | female | 47.0 | 1 | 1 | 11751 | 52.5542 | D35 | S | . 875 876 | 1 | 3 | Najib, Miss. Adele Kiamie &quot;Jane&quot; | female | 15.0 | 0 | 0 | 2667 | 7.2250 | NaN | C | . 879 880 | 1 | 1 | Potter, Mrs. Thomas Jr (Lily Alexenia Wilson) | female | 56.0 | 0 | 1 | 11767 | 83.1583 | C50 | C | . 880 881 | 1 | 2 | Shelley, Mrs. William (Imanita Parrish Hall) | female | 25.0 | 0 | 1 | 230433 | 26.0000 | NaN | S | . 211 rows × 12 columns . 여성.pivot(index=&quot;PassengerId&quot;, columns=&quot;Pclass&quot;, values=&quot;Fare&quot;) # 데이터 재구조화 . Pclass 1 2 3 . PassengerId . 2 71.2833 | NaN | NaN | . 3 NaN | NaN | 7.9250 | . 4 53.1000 | NaN | NaN | . 9 NaN | NaN | 11.1333 | . 10 NaN | 30.0708 | NaN | . ... ... | ... | ... | . 881 NaN | 26.0000 | NaN | . 883 NaN | NaN | 10.5167 | . 886 NaN | NaN | 29.1250 | . 888 30.0000 | NaN | NaN | . 889 NaN | NaN | 23.4500 | . 314 rows × 3 columns . How to combine data from multiple tables? . Concatenating objects . data = { &#39;수학&#39;: [90, 80], &#39;영어&#39;: [70, 60] } data2 = { &#39;언어&#39;: [20, 70], &#39;과학&#39;: [30, 60] } data3 = { &#39;수학&#39;: [100, 90], &#39;영어&#39;: [85, 65] } . data = pd.DataFrame(data) data2 = pd.DataFrame(data2) data3 = pd.DataFrame(data3) . data data2 . 언어 과학 . 0 20 | 30 | . 1 70 | 60 | . pd.concat([data, data2], axis=0) . 수학 영어 언어 과학 . 0 90.0 | 70.0 | NaN | NaN | . 1 80.0 | 60.0 | NaN | NaN | . 0 NaN | NaN | 20.0 | 30.0 | . 1 NaN | NaN | 70.0 | 60.0 | . data[&#39;언어&#39;] = data2[&#39;언어&#39;] data[&#39;언어&#39;] = data2[&#39;과학&#39;] # data[[&#39;언어&#39;, &#39;과학&#39;]] = data2[[&#39;언어&#39;, &#39;과학&#39;]] . data . 수학 영어 언어 . 0 90 | 70 | 30 | . 1 80 | 60 | 60 | . pd.concat([data, data2], axis=0) . 수학 영어 언어 언어 과학 . 0 90 | 70 | 30 | 20 | 30 | . 1 80 | 60 | 60 | 70 | 60 | . pd.concat([data, data3], axis=0) . 수학 영어 . 0 90 | 70 | . 1 80 | 60 | . 0 100 | 85 | . 1 90 | 65 | . Join tables using a common identifier . data = { &#39;이름&#39;: [&#39;영희&#39;, &#39;철수&#39;, &#39;호준&#39;], &#39;수학&#39;: [70, 60, 90] } data2 = { &#39;이름&#39;: [&#39;영희&#39;, &#39;호준&#39;], &#39;과학&#39;: [50, 70], &#39;언어&#39;:[90, 60] } . data = pd.DataFrame(data) data2 = pd.DataFrame(data2) . data . 이름 수학 . 0 영희 | 70 | . 1 철수 | 60 | . 2 호준 | 90 | . merge = pd.merge(data, data2, how=&quot;left&quot;, on=&quot;이름&quot;) merge . 이름 수학 과학 언어 . 0 영희 | 70 | 50.0 | 90.0 | . 1 철수 | 60 | NaN | NaN | . 2 호준 | 90 | 70.0 | 60.0 | . pandas datetime . df = pd.DataFrame({&#39;year&#39;:[2021, 2021], &#39;month&#39;: [7, 7], &#39;day&#39;:[9, 10]}) . df . year month day . 0 2021 | 7 | 9 | . 1 2021 | 7 | 10 | . data = pd.to_datetime(df) data . 0 2021-07-09 1 2021-07-10 dtype: datetime64[ns] . data.dt.year . 0 2021 1 2021 dtype: int64 . data.dt.month . 0 7 1 7 dtype: int64 . data.dt.weekday . 0 4 1 5 dtype: int64 . data.dt.day_name() # Series에서는 day_name(), weekday_name() - 버전업 되면서 삭제됨 . 0 Friday 1 Saturday dtype: object . pd.to_datetime(&#39;now&#39;) # UTC 시간 # pd.to_datetime(&#39;today&#39;) # 우리나라 시간 . Timestamp(&#39;2021-07-09 06:19:24.946765&#39;) . How to manipulate textual data? . df = pd.read_csv(&#39;train.csv&#39;) df.head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . df[&quot;Name&quot;].str.lower() df[&quot;Name&quot;].str.split(&quot;,&quot;) df[&quot;Name&quot;].str.contains(&quot;Mr&quot;).value_counts() df[df[&quot;Name&quot;].str.contains(&quot;Mr&quot;)] . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . 5 6 | 0 | 3 | Moran, Mr. James | male | NaN | 0 | 0 | 330877 | 8.4583 | NaN | Q | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 883 884 | 0 | 2 | Banfield, Mr. Frederick James | male | 28.0 | 0 | 0 | C.A./SOTON 34068 | 10.5000 | NaN | S | . 884 885 | 0 | 3 | Sutehall, Mr. Henry Jr | male | 25.0 | 0 | 0 | SOTON/OQ 392076 | 7.0500 | NaN | S | . 885 886 | 0 | 3 | Rice, Mrs. William (Margaret Norton) | female | 39.0 | 0 | 5 | 382652 | 29.1250 | NaN | Q | . 889 890 | 1 | 1 | Behr, Mr. Karl Howell | male | 26.0 | 0 | 0 | 111369 | 30.0000 | C148 | C | . 890 891 | 0 | 3 | Dooley, Mr. Patrick | male | 32.0 | 0 | 0 | 370376 | 7.7500 | NaN | Q | . 647 rows × 12 columns . df[&quot;Sex&quot;].replace({&quot;male&quot;: &quot;1&quot;, &quot;female&quot;: &quot;0&quot;}) . 0 1 1 0 2 0 3 0 4 1 .. 886 1 887 0 888 0 889 1 890 1 Name: Sex, Length: 891, dtype: object .",
            "url": "https://yebonkwak.github.io/modele_blog/python/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D/pandas/2021/07/20/_07_07_%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D_pandas-(1).html",
            "relUrl": "/python/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D/pandas/2021/07/20/_07_07_%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D_pandas-(1).html",
            "date": " • Jul 20, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "데이터 분석 Numpy 기초 문법 노트북",
            "content": "리스트 = [[1, 2, 3,], [4, 5, 6,], [7, 8 ,9]] 리스트[0][0] 리스트[0] 리스트[2][0] 리스트*2 . [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6], [7, 8, 9]] . import numpy as np 리스트 = [[1, 2, 3,], [4, 5, 6,], [7, 8 ,9]] 리스트 = np.array(리스트) 리스트 * 2 리스트 + 100 . array([[101, 102, 103], [104, 105, 106], [107, 108, 109]]) . a = np.arange(15).reshape(3, 5) a . array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14]]) . a = np.arange(20).reshape(4, 5) a . array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]]) . a = np.arange(20).reshape(2, 2, 5) a[0][1][2] . 7 . a = np.arange(15).reshape(3, 5) a a.shape a.ndim a.dtype.name a.itemsize a.size type(a) # flat한 데이터 사이즈 type(a) . numpy.ndarray . np.zeros((3, 4)) . array([[0., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]]) . np.ones((2, 3), dtype=np.int16) . array([[1, 1, 1], [1, 1, 1]], dtype=int16) . np.empty((2, 3)) . array([[4.66277922e-310, 0.00000000e+000, 0.00000000e+000], [0.00000000e+000, 0.00000000e+000, 0.00000000e+000]]) . np.arange(0, 2, 0.3) . array([0. , 0.3, 0.6, 0.9, 1.2, 1.5, 1.8]) . np.linspace(0, 10, 20) . array([ 0. , 0.52631579, 1.05263158, 1.57894737, 2.10526316, 2.63157895, 3.15789474, 3.68421053, 4.21052632, 4.73684211, 5.26315789, 5.78947368, 6.31578947, 6.84210526, 7.36842105, 7.89473684, 8.42105263, 8.94736842, 9.47368421, 10. ]) . 리스트 = [[1, 2, 3,], [4, 5, 6,], [7, 8 ,9]] a = np.array(리스트) # a.sum(), sum(리스트) # sum(리스트)는 애러납니다. a.min(). min(리스트) a.max(), max(리스트) #2개는 출력하는 결과도 다릅니다. . TypeError Traceback (most recent call last) &lt;ipython-input-24-2f5d10055f0f&gt; in &lt;module&gt;() 2 a = np.array(리스트) 3 # a.sum(), sum(리스트) # sum(리스트)는 애러납니다. -&gt; 4 a.min(). min(리스트) 5 a.max(), max(리스트) #2개는 출력하는 결과도 다릅니다. /usr/local/lib/python3.7/dist-packages/numpy/core/_methods.py in _amin(a, axis, out, keepdims, initial, where) 41 def _amin(a, axis=None, out=None, keepdims=False, 42 initial=_NoValue, where=True): &gt; 43 return umr_minimum(a, axis, None, out, keepdims, initial, where) 44 45 def _sum(a, axis=None, dtype=None, out=None, keepdims=False, TypeError: &#39;list&#39; object cannot be interpreted as an integer . b = np.arange(12).reshape(3, 4) b . array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]]) . b.sum(axis=0) # col기준으로 row끼리 더한 것(세로) b.sum(axis=1) # row기준으로 col끼리 더한 것(가로) b.sum() #flat하게 모두 더한 것 . 66 . b.ravel() . array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) . b.T # 잘 써요! # b.transpose() 잘 안써요! . array([[ 0, 4, 8], [ 1, 5, 9], [ 2, 6, 10], [ 3, 7, 11]]) . a = np.array([[1,2], [3,4,]]) b = np.floor([[5,6], [7,8]]) np.vstack((a, b)) np.hstack((a, b)) . array([[1., 2., 5., 6.], [3., 4., 7., 8.]]) . a = np.arange(12).reshape(3, 4) b = a &gt; 4 b . array([[False, False, False, False], [False, True, True, True], [ True, True, True, True]]) . b.sum() . 7 .",
            "url": "https://yebonkwak.github.io/modele_blog/python/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D/numpy/2021/07/20/_07_05_%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D_numpy.html",
            "relUrl": "/python/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D/numpy/2021/07/20/_07_05_%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D_numpy.html",
            "date": " • Jul 20, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "데이터 분석 Python 기초 문법 노트북",
            "content": "x = 3 y = 7 x + y . 10 . &#47560;&#53356;&#45796;&#50868; . &#47560;&#53356;&#45796;&#50868; . &#47560;&#53356;&#45796;&#50868; . hello world | hello world | hello world | . hello world | hello world | hello world | &#48320;&#49688; . 대문자와 소문자는 다릅니다! | 변수명에 띄어쓰기를 쓰지 않습니다! | 맨 앞에 숫자를 사용하지 않습니다. | 카멜 표기법이나 스네이크 표기법 중 일반 변수는 스네이크 표기법을 사용합니다. | for, if, print, sum 등 이미 예약되어 있는 것은 변수로 사용하지 않습니다. | . x = 3 y = 7 x + y x - y x * y x // y . 0 . x = 3 y = 7 print(x + y) print(x - y) print(x * y) print(x // y) . 10 -4 21 0 . a = 10 b = &#39;10&#39; print(a + a) print(b + b) . 20 1010 . a = 10 # int : 정수 b = &#39;10&#39; # str : 문자 c = &#39;lee&#39; d = &#39;hojun&#39; e = True # bool : 불리언 f = 10.1 # float : 실수 print(type(a)) . &lt;class &#39;int&#39;&gt; . 3 &gt; 10 . False . a + b . TypeError Traceback (most recent call last) &lt;ipython-input-15-bd58363a63fc&gt; in &lt;module&gt;() -&gt; 1 a + b TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39; . a = [10, 20, 30, 10.1, 20.1, 30.1, &#39;hojun&#39;] # list b = (10., 20, 30) # tuple c = {10., 20, 30, 30, 30} # set d = {&#39;one&#39;:1, &#39;two&#39;:2} # dict print(type(a)) . &lt;class &#39;list&#39;&gt; . a.pop() sum(a) . 90.19999999999999 . &#54805;&#48320;&#54872; . a = 10 b = &#39;10&#39; print(str(a) + b) print(a + int(b)) . 1010 20 . &#49328;&#49696;&#50672;&#49328; . a = 7 b = 3 print (a + b) print (a - b) print (a * b) print (a / b) print (a // b) print (a ** b) print (a % b) . 10 4 21 2.3333333333333335 2 343 . &#48708;&#44368;&#50672;&#49328; . a = 3 b = b print(a &gt; b) print(a &gt;= b) print(a &lt; b) print(a &lt;= b) print(a == b) print(a != b) . False True False True True False . &#45436;&#47532;&#50672;&#49328; . a = 10 b = 20 a + b . a = True #1 b = False #0 print(a and b) print(a or b) print(not a) . False True False . result = 0 for i in range(1001): if i % 3 == 0 or i % 5 == 0: result = result + i print(result) . 234168 . &#47928;&#51088;&#50676; . s = &#39;paullab CEO leehojun&#39; . s.count(&#39;l&#39;) . 3 . s.count(&#39; &#39;) . 2 . s.upper() . &#39;PAULLAB CEO LEEHOJUN&#39; . s.lower() . &#39;paullab ceo leehojun&#39; . s.split(&#39; &#39;) . [&#39;paullab&#39;, &#39;CEO&#39;, &#39;leehojun&#39;] . &#39;-&#39;.join([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]) . &#39;a-b-c&#39; . d = s.split(&#39; &#39;) &#39;-&#39;.join(d) . &#39;paullab-CEO-leehojun&#39; . dir(s) . [&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mod__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;capitalize&#39;, &#39;casefold&#39;, &#39;center&#39;, &#39;count&#39;, &#39;encode&#39;, &#39;endswith&#39;, &#39;expandtabs&#39;, &#39;find&#39;, &#39;format&#39;, &#39;format_map&#39;, &#39;index&#39;, &#39;isalnum&#39;, &#39;isalpha&#39;, &#39;isascii&#39;, &#39;isdecimal&#39;, &#39;isdigit&#39;, &#39;isidentifier&#39;, &#39;islower&#39;, &#39;isnumeric&#39;, &#39;isprintable&#39;, &#39;isspace&#39;, &#39;istitle&#39;, &#39;isupper&#39;, &#39;join&#39;, &#39;ljust&#39;, &#39;lower&#39;, &#39;lstrip&#39;, &#39;maketrans&#39;, &#39;partition&#39;, &#39;replace&#39;, &#39;rfind&#39;, &#39;rindex&#39;, &#39;rjust&#39;, &#39;rpartition&#39;, &#39;rsplit&#39;, &#39;rstrip&#39;, &#39;split&#39;, &#39;splitlines&#39;, &#39;startswith&#39;, &#39;strip&#39;, &#39;swapcase&#39;, &#39;title&#39;, &#39;translate&#39;, &#39;upper&#39;, &#39;zfill&#39;] . s =&#39; hello world&#39; print(s) print(s.strip()) print(s.replace(&#39; &#39;,&#39;&#39;)) . hello world hello world helloworld . &#47532;&#49828;&#53944; . 순서가 있고, 수정이 가능합니다. | . a = [10, 20, 30, 40, 50, 60, 70, 15] a a[0] # 0은 인덱스이고, a[0] 호출하는 것을 indexing이라고 합니다. a[0], a[1], a[2], a[3], a[4] a[0:5] # 슬라이싱, 자료형[start:stop:step] a[::2] # 슬라이싱, 자료형[start:stop:step], 안써요... a[::-1] # 슬라이싱, 자료형[start:stop:step] a[0] = 1000 a . [1000, 20, 30, 40, 50, 60, 70, 15] . dir(a) a.append(10) # 값을 맨 뒤에 추가합니다. 잘써요! a.clear() # a에 모든 값을 비웁니다. 안써요... a.copy() # a에 모든 값을 복사합니다. a.count() # a에서 특정한 값의 개수를 찾습니다. 잘써요! a.extend([10, 20, 30]) # a에 맨 뒤에 여러개의 값을 추가합니다. a.index() # a에서 특정한 값의 인덱스를 찾습니다. a.insert(2, 10000) # a에 중간에 값을 삽입합니다. a.pop() # a에 맨 뒤에 값을 빼냅니다. 빼낸 값은 삭제됩니다. 잘써요! a.remove(10000) # a에 특정한 값을 삭제합니다. a.reverse() # a에 값을 뒤집습니다. 잘써요! a.sort() # a의 값을 정렬합니다. 잘써요! . [&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__reversed__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;] . a.append(100) a.append(100) a . [1000, 20, 30, 40, 50, 60, 70, 15, 100, 100, 100, 100, 100, 100] . a.count(100) . 6 . a.sort() a . [15, 20, 30, 40, 50, 60, 70, 100, 100, 100, 100, 100, 100, 1000] . a.reverse() a . [1000, 100, 100, 100, 100, 100, 100, 70, 60, 50, 40, 30, 20, 15] . &#53916;&#54540;, &#46357;&#49492;&#45320;&#47532;, &#49483; . t = (10, 20, 30) t . (10, 20, 30) . dir(t) . [&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;count&#39;, &#39;index&#39;] . 영한번역 = {&#39;one&#39; : &#39;하나&#39;, &#39;two&#39;: &#39;둘&#39;} 영한번역[&#39;one&#39;] . &#39;하나&#39; . s = {10, 20, 30, 30, 30} ss = {10, 40, 50} s | ss # 합집합 s &amp; ss # 교집합 s - ss # 차집합 . {20, 30} . f-string . age = 10 name = &#39;leehojun&#39; print(&#39;제 이름은 leehojun 입니다. 제 나이는 10 살입니다&#39;) print(&#39;제 이름은&#39;, name, &#39;입니다. 제 나이는&#39;, age, &#39;살입니다.&#39;) print(&#39;제 이름은 {0} 입니다. 제 나이는 {1} 살입니다. &#39;.format(name, age)) print(f&#39;제 이름은 {name} 입니다. 제 나이는 {age+age} 살입니다.&#39;) #이것만 씁시다! . 제 이름은 leehojun 입니다. 제 나이는 10 살입니다 제 이름은 leehojun 입니다. 제 나이는 10 살입니다. 제 이름은 leehojun 입니다. 제 나이는 10 살입니다. 제 이름은 leehojun 입니다. 제 나이는 20 살입니다. . built in function . abs() : 절댓값 | min() : 최솟값 | max() : 최댓값 | dir() : 매서드 확인 | id() : 메모리 주소 확인 | sorted() : 정렬 | reversed() : 역순(역정렬 아님) | enumerate() : 순서를 매김 (for 하면서 설명) *형변환: set() : 집합으로 형변환 | dict() : 딕셔너리로 형변환 | bool() : 불리언으로 형변환 | int() : 정수형으로 형번환 | str() : 문자열로 형변환 | float() : 실수형으로 형변환 | tuple() : 튜플형으로 형번환 | list() : 리스트로 형변환 | . | ord() : 문자를 숫자로 변환 | chr() : 숫자를 문자로 변환 | sum() : 숫자를 문자로 변환(더할 수 없으면 애러) | filter() : 필터링(수학점수 90점 이상인 사람?) | print() : 출력 | format() : 콤마찍기 | len() : 길이 출력!! 중요!!!!! | type() : 타입 알아보기 중요!! | range() : 연속된 값 생성(0 ~ 99 -&gt;range(100)) | zip(&#39;abc&#39;,&#39;def&#39;) | map(lambda x:x**2,[1,2,3]) | round() : 소수점 자리 반올림 | . list(zip(&#39;abc&#39;,&#39;def&#39;, &#39;aaa&#39;)) . [(&#39;a&#39;, &#39;d&#39;, &#39;a&#39;), (&#39;b&#39;, &#39;e&#39;, &#39;a&#39;), (&#39;c&#39;, &#39;f&#39;, &#39;a&#39;)] . list(map(lambda x:x**2,[1,2,3])) . [1, 4, 9] . &#51312;&#44148;&#47928; . if True: print(&#39;hello&#39;) print(&#39;end&#39;) . hello end . score = 89 money = 0 if score &gt; 90: print(&#39;mom: im so happy&#39;) money += 1000000 # money = money + 1000000, 할당연산이라 부릅니다. elif score &gt; 80: print(&#39;mom: im happy&#39;) money += 100000 elif score &gt; 70: print(&#39;mom: happy?&#39;) money += 10000 else: print(&#39;mom: ...&#39;) print(money) . mom: im happy 100000 . &#47928;&#51228; &#54400;&#51060;&#50752; &#50629;&#45796;&#50868; &#44172;&#51076; &#51228;&#51089; . str(list(range(100))) str(list(range(100))).count(&#39;8&#39;) str(list(range(10001))).count(&#39;8&#39;) . 4000 . 리스트 = [1, 3, 4, 8, 13, 17, 20] 리스트둘 = 리스트[1:] . list(zip(리스트, 리스트둘)) . [(1, 3), (3, 4), (4, 8), (8, 13), (13, 17), (17, 20)] . 묶어준리스트 = list(zip(리스트, 리스트둘)) 묶어준리스트.sort(key=lambda x:x[0]-x[1], reverse=True) 묶어준리스트 묶어준리스트[0] . (3, 4) . I = [&#39;a&#39;, &#39;bbb&#39;, &#39;cc&#39;, &#39;eeeee&#39;, &#39;dddd&#39;] I.sort(key=len) I . [&#39;a&#39;, &#39;cc&#39;, &#39;bbb&#39;, &#39;dddd&#39;, &#39;eeeee&#39;] . import random 정답 = random.randint(1, 100) while True: user = int(input(&#39;숫자를 입력해주세요.&#39;)) if user &lt; 정답: print(&#39;Up&#39;) elif user &gt; 정답: print(&#39;Down&#39;) else: print(&#39;정답!&#39;) break . 숫자를 입력해주세요.10 up 숫자를 입력해주세요.14 up 숫자를 입력해주세요.40 up 숫자를 입력해주세요.70 down 숫자를 입력해주세요.55 down 숫자를 입력해주세요.46 up 숫자를 입력해주세요.48 up 숫자를 입력해주세요.49 up 숫자를 입력해주세요.50 up 숫자를 입력해주세요.53 down 숫자를 입력해주세요.52 down 숫자를 입력해주세요.52 down 숫자를 입력해주세요.51 정답! . &#48152;&#48373;&#47928; . for i in range(10): print(i) . 0 1 2 3 4 5 6 7 8 9 . list(range(10)) list(range(0, 10,2)) # start, stop, step list(range(5, 10)) #start, stop list(range(10, 5, -1)) #start, stop, step . [10, 9, 8, 7, 6] . s = 0 for i in range(101): s = s +i # s += 1 print(s) . 5050 . s = 0 for i in range(0, 101, 2): s = s +i # s += 1 print(s) . 2550 . sum(range(0, 101, 2)) print(s) . 2550 . s = 0 for i in range(0, 101, 2): if i % 2 ==0: s = s +i # s += 1 print(s) . 2550 . for i in range(1, 10): print(f&#39;{2} X {i} = { 2 * i }&#39;) for i in range(1, 10): print(f&#39;{4} X {i} = { 4 * i }&#39;) for i in range(1, 10): print(f&#39;{9} X {i} = { 9 * i }&#39;) . 2 X 1 = 2 2 X 2 = 4 2 X 3 = 6 2 X 4 = 8 2 X 5 = 10 2 X 6 = 12 2 X 7 = 14 2 X 8 = 16 2 X 9 = 18 4 X 1 = 4 4 X 2 = 8 4 X 3 = 12 4 X 4 = 16 4 X 5 = 20 4 X 6 = 24 4 X 7 = 28 4 X 8 = 32 4 X 9 = 36 9 X 1 = 9 9 X 2 = 18 9 X 3 = 27 9 X 4 = 36 9 X 5 = 45 9 X 6 = 54 9 X 7 = 63 9 X 8 = 72 9 X 9 = 81 . for 단 in range(2, 10): for i in range(1, 10): print(f&#39;{단} X {i} = { 단 * i }&#39;) . 2 X 1 = 2 2 X 2 = 4 2 X 3 = 6 2 X 4 = 8 2 X 5 = 10 2 X 6 = 12 2 X 7 = 14 2 X 8 = 16 2 X 9 = 18 3 X 1 = 3 3 X 2 = 6 3 X 3 = 9 3 X 4 = 12 3 X 5 = 15 3 X 6 = 18 3 X 7 = 21 3 X 8 = 24 3 X 9 = 27 4 X 1 = 4 4 X 2 = 8 4 X 3 = 12 4 X 4 = 16 4 X 5 = 20 4 X 6 = 24 4 X 7 = 28 4 X 8 = 32 4 X 9 = 36 5 X 1 = 5 5 X 2 = 10 5 X 3 = 15 5 X 4 = 20 5 X 5 = 25 5 X 6 = 30 5 X 7 = 35 5 X 8 = 40 5 X 9 = 45 6 X 1 = 6 6 X 2 = 12 6 X 3 = 18 6 X 4 = 24 6 X 5 = 30 6 X 6 = 36 6 X 7 = 42 6 X 8 = 48 6 X 9 = 54 7 X 1 = 7 7 X 2 = 14 7 X 3 = 21 7 X 4 = 28 7 X 5 = 35 7 X 6 = 42 7 X 7 = 49 7 X 8 = 56 7 X 9 = 63 8 X 1 = 8 8 X 2 = 16 8 X 3 = 24 8 X 4 = 32 8 X 5 = 40 8 X 6 = 48 8 X 7 = 56 8 X 8 = 64 8 X 9 = 72 9 X 1 = 9 9 X 2 = 18 9 X 3 = 27 9 X 4 = 36 9 X 5 = 45 9 X 6 = 54 9 X 7 = 63 9 X 8 = 72 9 X 9 = 81 . x = 0 while x &lt; 10: print(x) x += 1 . 0 1 2 3 4 5 6 7 8 9 . x = 1 while x &lt; 10: print(f&#39;{2} X {x} = { 2 * x }&#39;) x += 1 . 2 X 1 = 2 2 X 2 = 4 2 X 3 = 6 2 X 4 = 8 2 X 5 = 10 2 X 6 = 12 2 X 7 = 14 2 X 8 = 16 2 X 9 = 18 . &#47784;&#46280; . # name = &#39;leehojun&#39; # age = 10 . import test as t print(t.name) print(t.age) . leehojun 10 . from test import name, age print(name) print(age) . leehojun 10 . &#54632;&#49688; . 재사용성을 높일 수 있다. | 코드의 구조를 파악하기 쉽다. | 유지보수를 쉽게 할 수 있다. | def 더하기(x, y): return x + y 더하기(10, 20) . def 원의넓이(r): return(r**2) * 3.14 print(원의넓이(10) + 100) print(원의넓이(10) + 50) . 414.0 364.0 . 점수 = [10, 20, 30, 40] def 평균(반점수): s = 0 for i in 반점수: s += i return s / len(반점수) print(평균(점수)) print(평균(점수) + 5) . 25.0 30.0 . &#54028;&#51068; &#51077;&#52636;&#47141; . f = open(&quot;구구단.txt&quot;, &#39;w&#39;) # r(읽음), w(작성, 덮어씀), a(추가) data = &#39;&#39; for 단 in range(2, 10): for i in range(1, 10): data += f&#39;{단} X {i} = {단 * i} n&#39; f.write(data) f.close() . &#53364;&#47000;&#49828; . 현실세계의 개념을 Code로 옮겨놓은 것 | 클래스의 첫 문자열은 대문자로 합니다. | . class Car : # 클래스 변수 또는 맴버 maxspeed = 300 maxspeople = 5 def start(self): print(&#39;출발하였습니다.&#39;) # 메서드 def stop(self): print(&#39;멈췄습니다.&#39;) . audi = Car() # audi라는 인스턴스 생성 bmw = Car() # bmw라는 인스턴스 생성 audi.start() print(audi.maxpeople) print(Car.maxspeed) # 이렇게 실행하시면 안됩니다. . 출발하였습니다. . AttributeError Traceback (most recent call last) &lt;ipython-input-5-9392d9e669c2&gt; in &lt;module&gt;() 3 4 audi.start() -&gt; 5 print(audi .maxpeople) 6 print(Car. maxspeed) # 이렇게 실행하시면 안됩니다. AttributeError: &#39;Car&#39; object has no attribute &#39;maxpeople&#39; . dir(audi) . [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;maxspeed&#39;, &#39;maxspeople&#39;, &#39;start&#39;, &#39;stop&#39;] . class 전기차(Car): 배터리 = 100 배터리에_따라_갈_수_있는_거리 = 300 전기차audi = 전기차() 전기차audi.start() . 출발하였습니다. .",
            "url": "https://yebonkwak.github.io/modele_blog/python.%20%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D/2021/07/20/_07_05_%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D_Python.html",
            "relUrl": "/python.%20%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D/2021/07/20/_07_05_%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D_Python.html",
            "date": " • Jul 20, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "2021년 여름방학 무료특강 손에 잡히는 딥러닝",
            "content": "&#44536;&#47000;&#54532;&#51032; &#54620;&#44544; &#54256;&#53944; . !sudo apt install -y fonts-nanum* !sudo fc-cache -fv !rm ~/.cache/matplotlib -rf . Reading package lists... Done Building dependency tree Reading state information... Done Note, selecting &#39;fonts-nanum-eco&#39; for glob &#39;fonts-nanum*&#39; Note, selecting &#39;fonts-nanum&#39; for glob &#39;fonts-nanum*&#39; Note, selecting &#39;fonts-nanum-gothic-light&#39; for glob &#39;fonts-nanum*&#39; Note, selecting &#39;fonts-nanum-coding&#39; for glob &#39;fonts-nanum*&#39; Note, selecting &#39;fonts-nanum-extra&#39; for glob &#39;fonts-nanum*&#39; fonts-nanum is already the newest version (20170925-1). fonts-nanum-coding is already the newest version (2.5-1). fonts-nanum-eco is already the newest version (1.000-6). fonts-nanum-extra is already the newest version (20170925-1). 0 upgraded, 0 newly installed, 0 to remove and 39 not upgraded. /usr/share/fonts: caching, new cache contents: 0 fonts, 1 dirs /usr/share/fonts/truetype: caching, new cache contents: 0 fonts, 3 dirs /usr/share/fonts/truetype/humor-sans: caching, new cache contents: 1 fonts, 0 dirs /usr/share/fonts/truetype/liberation: caching, new cache contents: 16 fonts, 0 dirs /usr/share/fonts/truetype/nanum: caching, new cache contents: 31 fonts, 0 dirs /usr/local/share/fonts: caching, new cache contents: 0 fonts, 0 dirs /root/.local/share/fonts: skipping, no such directory /root/.fonts: skipping, no such directory /var/cache/fontconfig: cleaning cache directory /root/.cache/fontconfig: not cleaning non-existent cache directory /root/.fontconfig: not cleaning non-existent cache directory fc-cache: succeeded . import matplotlib.pyplot as plt plt.rc(&#39;font&#39;, family=&#39;NanumBarunGothic&#39;) . &#45936;&#51060;&#53552; &#49373;&#49457; . import pandas as pd import numpy as np . 주가 = [ np.random.randint(10, 50) + i*2 for i in range(100) ] . import matplotlib.pyplot as plt plt.plot(np.arange(1, 101), 주가) plt.show() . &#46373;&#47084;&#45789; . 독립 = pd.DataFrame(np.arange(1, 101)) 종속 = pd.DataFrame(주가) 독립.shape, 종속.shape . ((100, 1), (100, 1)) . import tensorflow as tf . X = tf.keras.layers.Input(shape=[1]) # 독립변수의 col Y = tf.keras.layers.Dense(1)(X) # 종속변수의 col model = tf.keras.models.Model(X, Y) model.compile(loss=&#39;mse&#39;) # MSE(Mean squared error) . model.fit(독립, 종속, epochs=10000, verbose=0) model.fit(독립, 종속, epochs=10) . Epoch 1/10 4/4 [==============================] - 0s 3ms/step - loss: 118.4112 Epoch 2/10 4/4 [==============================] - 0s 3ms/step - loss: 118.4161 Epoch 3/10 4/4 [==============================] - 0s 2ms/step - loss: 118.6262 Epoch 4/10 4/4 [==============================] - 0s 3ms/step - loss: 118.4688 Epoch 5/10 4/4 [==============================] - 0s 3ms/step - loss: 118.4280 Epoch 6/10 4/4 [==============================] - 0s 3ms/step - loss: 118.4940 Epoch 7/10 4/4 [==============================] - 0s 3ms/step - loss: 118.4082 Epoch 8/10 4/4 [==============================] - 0s 5ms/step - loss: 118.4647 Epoch 9/10 4/4 [==============================] - 0s 3ms/step - loss: 118.3927 Epoch 10/10 4/4 [==============================] - 0s 3ms/step - loss: 118.3953 . &lt;tensorflow.python.keras.callbacks.History at 0x7f9ca8374110&gt; . model.predict([50]) model.predict([40]) . array([[104.776886]], dtype=float32) . model.predict(독립) . array([[ 25.306517], [ 27.344217], [ 29.38192 ], [ 31.41962 ], [ 33.45732 ], [ 35.495026], [ 37.532726], [ 39.570427], [ 41.60813 ], [ 43.645832], [ 45.683533], [ 47.721237], [ 49.758938], [ 51.79664 ], [ 53.834343], [ 55.872044], [ 57.909744], [ 59.94745 ], [ 61.98515 ], [ 64.02285 ], [ 66.060555], [ 68.09825 ], [ 70.135956], [ 72.17366 ], [ 74.211365], [ 76.24906 ], [ 78.28676 ], [ 80.32446 ], [ 82.36217 ], [ 84.39987 ], [ 86.43758 ], [ 88.47527 ], [ 90.51298 ], [ 92.550674], [ 94.58838 ], [ 96.62608 ], [ 98.66378 ], [100.701485], [102.73919 ], [104.776886], [106.81459 ], [108.852295], [110.88999 ], [112.9277 ], [114.9654 ], [117.0031 ], [119.0408 ], [121.07851 ], [123.1162 ], [125.15391 ], [127.191605], [129.22931 ], [131.26701 ], [133.30472 ], [135.3424 ], [137.38013 ], [139.41782 ], [141.45552 ], [143.49323 ], [145.53091 ], [147.56863 ], [149.60632 ], [151.64403 ], [153.68173 ], [155.71944 ], [157.75714 ], [159.79483 ], [161.83253 ], [163.87024 ], [165.90794 ], [167.94565 ], [169.98335 ], [172.02104 ], [174.05875 ], [176.09645 ], [178.13416 ], [180.17186 ], [182.20956 ], [184.24725 ], [186.28496 ], [188.32266 ], [190.36037 ], [192.39807 ], [194.43578 ], [196.47346 ], [198.51117 ], [200.54887 ], [202.58658 ], [204.62428 ], [206.66199 ], [208.69968 ], [210.73738 ], [212.77509 ], [214.81279 ], [216.8505 ], [218.8882 ], [220.92589 ], [222.9636 ], [225.0013 ], [227.039 ]], dtype=float32) . model.get_weights() . [array([[2.0377018]], dtype=float32), array([23.268814], dtype=float32)] . 2.072317 * 50 + 22.033388 . 125.649238 . model.predict([50]) . array([[125.15391]], dtype=float32) . plt.plot(np.arange(1, 101), 주가) plt.plot(np.arange(1, 101), 2.07 * np.arange(1, 101) + 22.03) plt.show() . 오차값 = 종속 - model.predict(독립) 오차값 . 0 . 0 3.693483 | . 1 13.655783 | . 2 8.618080 | . 3 -10.419621 | . 4 -1.457321 | . ... ... | . 95 5.111801 | . 96 3.074112 | . 97 7.036407 | . 98 -12.001297 | . 99 12.960999 | . 100 rows × 1 columns . 오차값의제곱 = 오차값 ** 2 오차값의제곱 . 0 . 0 13.641819 | . 1 186.480401 | . 2 74.271305 | . 3 108.568492 | . 4 2.123785 | . ... ... | . 95 26.130511 | . 96 9.450164 | . 97 49.511030 | . 98 144.031130 | . 99 167.987483 | . 100 rows × 1 columns . (오차값의제곱.sum())/100 ## MSE . 0 118.389643 dtype: float64 . &#52572;&#49548; &#51228;&#44273;&#48277; . y = ax + b | 참고자료 : https://ko.wikipedia.org/wiki/%EC%B5%9C%EC%86%8C%EC%A0%9C%EA%B3%B1%EB%B2%95 | 구하고자 하는 방정식은 y = ax + b이다. 상수 a, b값을 안다면, a, b는 다음으로 계산할 수 있다. | a : $${ displaystyle a={ frac {n Sigma XY- Sigma X Sigma Y}{n Sigma X^{2}- Sigma X Sigma X}}}$$ . | b : $${ displaystyle b={ frac { Sigma X^{2} Sigma Y- Sigma X Sigma XY}{n Sigma X^{2}- Sigma X Sigma X}}}$$ . | . 두수의곱 = 독립*종속 int(100 * 두수의곱.sum()) . 80715800 . int(독립.sum() * 종속.sum()) . 64054200 . int(100 * (독립 ** 2).sum()) . 33835000 . int(독립.sum() * 독립.sum()) . 25502500 . 분자 = int(100 * 두수의곱.sum()) - int(독립.sum() * 종속.sum()) 분모 = int(100 * (독립 ** 2).sum()) - int(독립.sum() * 독립.sum()) . 분자 / 분모 . 1.9995919591959197 . model.get_weights() . [array([[2.0377018]], dtype=float32), array([23.268814], dtype=float32)] . ${ displaystyle b={ frac { Sigma X^{2} Sigma Y- Sigma X Sigma XY}{n Sigma X^{2}- Sigma X Sigma X}}}$ . 분자 = ((독립**2).sum() * 종속.sum()) - (독립.sum() * (독립*종속).sum()) 분모 = (100 * (독립**2).sum()) - (독립.sum() * 독립.sum()) . 분자 / 분모 . 0 25.860606 dtype: float64 . &#45800;&#49692;&#45936;&#51060;&#53552;&#51032; &#55176;&#46304;&#47112;&#51060;&#50612; . 매출액 = [2, 5, 10, 20, 40, 80] 광고액 = [1, 2, 4, 6, 8, 10] 순익 = [1, 1.5, 3, 10, 20, 60] . plt.plot(np.arange(1, 7), 매출액, label=&#39;매출액&#39;) plt.plot(np.arange(1, 7), 광고액, label=&#39;광고액&#39;) plt.plot(np.arange(1, 7), 순익, label=&#39;순익&#39;) plt.legend() plt.show() . 독립 = pd.DataFrame({ &#39;매출액&#39; : 매출액, &#39;광고액&#39; : 광고액 }) 종속 = pd.DataFrame({ &#39;순익&#39; : 순익 }) 독립.shape, 종속.shape . ((6, 2), (6, 1)) . 독립 . 매출액 광고액 . 0 2 | 1 | . 1 5 | 2 | . 2 10 | 4 | . 3 20 | 6 | . 4 40 | 8 | . 5 80 | 10 | . X = tf.keras.layers.Input(shape=[2]) # 독립변수의 col ## 1. 히든 레이어의 노드(뉴런) 수는 2개부터 5개까지 점차 늘려보고 그래프를 확인해보세요. H = tf.keras.layers.Dense(2, activation=&#39;swish&#39;)(X) ## 2. 히든 레이어의 수를 2개, 3개로 점차 늘려보고 그래프를 확인해보세요. # H = tf.keras.layers.Dense(2, activation=&#39;swish&#39;)(H) Y = tf.keras.layers.Dense(1)(H) # 종속변수의 col model = tf.keras.models.Model(X, Y) model.compile(loss=&#39;mse&#39;) # MSE(Mean squared error) . model.fit(독립, 종속, epochs=10000, verbose=0) model.fit(독립, 종속, epochs=10) . Epoch 1/10 1/1 [==============================] - 0s 5ms/step - loss: 36.9067 Epoch 2/10 1/1 [==============================] - 0s 7ms/step - loss: 36.8933 Epoch 3/10 1/1 [==============================] - 0s 5ms/step - loss: 36.8940 Epoch 4/10 1/1 [==============================] - 0s 6ms/step - loss: 36.8806 Epoch 5/10 1/1 [==============================] - 0s 5ms/step - loss: 36.8812 Epoch 6/10 1/1 [==============================] - 0s 5ms/step - loss: 36.8679 Epoch 7/10 1/1 [==============================] - 0s 6ms/step - loss: 36.8685 Epoch 8/10 1/1 [==============================] - 0s 5ms/step - loss: 36.8551 Epoch 9/10 1/1 [==============================] - 0s 6ms/step - loss: 36.8558 Epoch 10/10 1/1 [==============================] - 0s 6ms/step - loss: 36.8424 . &lt;tensorflow.python.keras.callbacks.History at 0x7f9c9f410a10&gt; . model.get_weights() . [array([[ 0.03463789, -0.05114527], [-0.4278318 , 0.17921998]], dtype=float32), array([0.23633954, 1.2595593 ], dtype=float32), array([[-29.92225 ], [-29.651735]], dtype=float32), array([29.98308], dtype=float32)] . model.predict([[10, 4]]) . array([[2.9516315]], dtype=float32) . model.predict(독립) . array([[ 0.31713486], [ 3.0344315 ], [ 2.9516315 ], [ 7.3105507 ], [25.017687 ], [46.368225 ]], dtype=float32) . 종속 . 순익 . 0 1.0 | . 1 1.5 | . 2 3.0 | . 3 10.0 | . 4 20.0 | . 5 60.0 | . plt.plot(np.arange(1, 7), model.predict(독립), label=&#39;예측값&#39;) plt.plot(np.arange(1, 7), 종속, label=&#39;실제값&#39;) plt.legend() plt.show() . &#48373;&#51105; &#45936;&#51060;&#53552;&#51032; &#55176;&#46304;&#47112;&#51060;&#50612; . 그럼 주가는 잘 맞출까? (곡선 형태) | . import numpy as np import pandas as pd import matplotlib.pyplot as plt 광고액 = [ np.random.randint(10, 50) + np.log(i*5) * 50 for i in range(1, 101) ] 계절성 = [ np.sin(i/3)*100 + i*3 + j*2 for i, j in zip(np.arange(1, 101), 광고액) ] 매출액 = [i**(np.log(np.log(i))) + j for i, j in zip(np.arange(1, 101), 계절성) ] plt.plot(np.arange(1, 101), 광고액, label=&#39;a&#39;) plt.plot(np.arange(1, 101), 계절성, label=&#39;b&#39;) plt.plot(np.arange(1, 101), 매출액, label=&#39;c&#39;) plt.legend() plt.show() . /usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:7: RuntimeWarning: divide by zero encountered in log import sys . 독립 = pd.DataFrame({ &#39;계절성&#39; : 계절성, &#39;광고액&#39; : 광고액 }) 종속 = pd.DataFrame({ &#39;매출액&#39; : 매출액 }) 독립.shape, 종속.shape . ((100, 2), (100, 1)) . import tensorflow as tf #모델 준비 X = tf.keras.layers.Input(shape=[2]) # 독립변수의 col H = tf.keras.layers.Dense(200, activation=&#39;swish&#39;)(X) # 노드의 수는 천천히 늘려감! (2 ~ 200) # H = tf.keras.layers.Dense(5, activation=&#39;swish&#39;)(H) # 처음에는 주석처리! Y = tf.keras.layers.Dense(1)(H) # 종속변수의 col model = tf.keras.models.Model(X, Y) model.compile(loss=&#39;mse&#39;) # MSE(Mean squared error) . model.fit(독립, 종속, epochs=10000, verbose=0) model.fit(독립, 종속, epochs=10) . Epoch 1/10 4/4 [==============================] - 0s 3ms/step - loss: 31030.5703 Epoch 2/10 4/4 [==============================] - 0s 5ms/step - loss: 32710.4570 Epoch 3/10 4/4 [==============================] - 0s 3ms/step - loss: 31348.4434 Epoch 4/10 4/4 [==============================] - 0s 3ms/step - loss: 41892.3516 Epoch 5/10 4/4 [==============================] - 0s 3ms/step - loss: 37597.6719 Epoch 6/10 4/4 [==============================] - 0s 3ms/step - loss: 35604.6719 Epoch 7/10 4/4 [==============================] - 0s 3ms/step - loss: 33204.0156 Epoch 8/10 4/4 [==============================] - 0s 3ms/step - loss: 36819.3398 Epoch 9/10 4/4 [==============================] - 0s 5ms/step - loss: 43219.9883 Epoch 10/10 4/4 [==============================] - 0s 3ms/step - loss: 31084.8828 . &lt;tensorflow.python.keras.callbacks.History at 0x7f9c92f4c490&gt; . plt.plot(np.arange(1, 101), model.predict(독립), label=&#39;예측값&#39;) plt.plot(np.arange(1, 101), 종속, label=&#39;실제값&#39;) plt.legend() plt.show() . plt.plot(np.arange(1, 101), model.predict(독립), label=&#39;예측값&#39;) plt.plot(np.arange(1, 101), 종속, label=&#39;실제값&#39;) plt.legend() plt.show() . import tensorflow as tf #모델 준비 X = tf.keras.layers.Input(shape=[2]) # 독립변수의 col H = tf.keras.layers.Dense(5, activation=&#39;swish&#39;)(X) # 노드의 수는 천천히 늘려감! (2 ~ 5) H = tf.keras.layers.Dense(5, activation=&#39;swish&#39;)(H) # 천천히 늘려감! (2 ~ 5) H = tf.keras.layers.Dense(5, activation=&#39;swish&#39;)(H) # 천천히 늘려감! (2 ~ 5) H = tf.keras.layers.Dense(5, activation=&#39;swish&#39;)(H) # 천천히 늘려감! (2 ~ 5) H = tf.keras.layers.Dense(5, activation=&#39;swish&#39;)(H) # 천천히 늘려감! (2 ~ 5) Y = tf.keras.layers.Dense(1)(H) # 종속변수의 col model = tf.keras.models.Model(X, Y) model.compile(loss=&#39;mse&#39;) # MSE(Mean squared error) . model.fit(독립, 종속, epochs=10000, verbose=0) model.fit(독립, 종속, epochs=10) . Epoch 1/10 4/4 [==============================] - 0s 4ms/step - loss: 17272.0957 Epoch 2/10 4/4 [==============================] - 0s 4ms/step - loss: 43156.6562 Epoch 3/10 4/4 [==============================] - 0s 3ms/step - loss: 16989.7070 Epoch 4/10 4/4 [==============================] - 0s 5ms/step - loss: 17889.2598 Epoch 5/10 4/4 [==============================] - 0s 3ms/step - loss: 17336.5117 Epoch 6/10 4/4 [==============================] - 0s 6ms/step - loss: 21185.4141 Epoch 7/10 4/4 [==============================] - 0s 5ms/step - loss: 16363.0391 Epoch 8/10 4/4 [==============================] - 0s 3ms/step - loss: 23066.0176 Epoch 9/10 4/4 [==============================] - 0s 3ms/step - loss: 22610.3809 Epoch 10/10 4/4 [==============================] - 0s 3ms/step - loss: 29358.0098 . &lt;tensorflow.python.keras.callbacks.History at 0x7f9c98ca82d0&gt; . plt.plot(np.arange(1, 101), model.predict(독립), label=&#39;예측값&#39;) plt.plot(np.arange(1, 101), 종속, label=&#39;실제값&#39;) plt.legend() plt.show() . import tensorflow as tf #모델 준비 X = tf.keras.layers.Input(shape=[2]) # 독립변수의 col H = tf.keras.layers.Dense(5, activation=&#39;swish&#39;)(X) # 노드의 수는 천천히 늘려감! (2 ~ 5) for _ in range(10): H = tf.keras.layers.Dense(5, activation=&#39;swish&#39;)(H) # 천천히 늘려감! (2 ~ 5) Y = tf.keras.layers.Dense(1)(H) # 종속변수의 col model = tf.keras.models.Model(X, Y) model.compile(loss=&#39;mse&#39;) # MSE(Mean squared error) . model.fit(독립, 종속, epochs=10000, verbose=0) model.fit(독립, 종속, epochs=10) . Epoch 1/10 4/4 [==============================] - 0s 4ms/step - loss: 23658.7246 Epoch 2/10 4/4 [==============================] - 0s 3ms/step - loss: 23833.8301 Epoch 3/10 4/4 [==============================] - 0s 4ms/step - loss: 31947.2129 Epoch 4/10 4/4 [==============================] - 0s 4ms/step - loss: 25460.2480 Epoch 5/10 4/4 [==============================] - 0s 4ms/step - loss: 24909.1680 Epoch 6/10 4/4 [==============================] - 0s 4ms/step - loss: 24867.2402 Epoch 7/10 4/4 [==============================] - 0s 3ms/step - loss: 23354.0352 Epoch 8/10 4/4 [==============================] - 0s 3ms/step - loss: 26266.6719 Epoch 9/10 4/4 [==============================] - 0s 3ms/step - loss: 23356.0391 Epoch 10/10 4/4 [==============================] - 0s 3ms/step - loss: 24691.1309 . &lt;tensorflow.python.keras.callbacks.History at 0x7f9c93809fd0&gt; . plt.plot(np.arange(1, 101), model.predict(독립), label=&#39;예측값&#39;) plt.plot(np.arange(1, 101), 종속, label=&#39;실제값&#39;) plt.legend() plt.show() . 히든레이어는 1개 ~ 4개를 쌓아보고 정확도 측정하는 것이 보통. | 노드는 100개 ~ 200개를 쌓아보고 정확도 측정. | CNN이나 RNN 으로 넘어가기 전 좀 더 단순한 데이터로 신경망에 대해 학습할 것을 권함. | .",
            "url": "https://yebonkwak.github.io/modele_blog/tensorflow/deep%20learning/%EC%84%A0%ED%98%95%ED%9A%8C%EA%B7%80/2021/07/20/_06_30_(%EC%B5%9C%EC%A2%85_%EC%88%98%EC%A0%95)_%EC%86%90%EC%97%90_%EC%9E%A1%ED%9E%88%EB%8A%94_%EB%94%A5%EB%9F%AC%EB%8B%9D_%EA%B0%95%EC%9D%98%EC%9E%90%EB%A3%8C.html",
            "relUrl": "/tensorflow/deep%20learning/%EC%84%A0%ED%98%95%ED%9A%8C%EA%B7%80/2021/07/20/_06_30_(%EC%B5%9C%EC%A2%85_%EC%88%98%EC%A0%95)_%EC%86%90%EC%97%90_%EC%9E%A1%ED%9E%88%EB%8A%94_%EB%94%A5%EB%9F%AC%EB%8B%9D_%EA%B0%95%EC%9D%98%EC%9E%90%EB%A3%8C.html",
            "date": " • Jul 20, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://yebonkwak.github.io/modele_blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://yebonkwak.github.io/modele_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://yebonkwak.github.io/modele_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://yebonkwak.github.io/modele_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}